<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Blogs on Mike Letts</title>
    <link>https://michaelthomasletts.com/blog/</link>
    <description>Recent content in Blogs on Mike Letts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Copyright 2025, Michael Letts</copyright>
    <lastBuildDate>Thu, 11 Sep 2025 14:07:29 -0400</lastBuildDate>
    <atom:link href="https://michaelthomasletts.com/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Wilderness and the No-Place</title>
      <link>https://michaelthomasletts.com/blog/the-wilderness-and-the-no-place/</link>
      <pubDate>Thu, 11 Sep 2025 14:07:29 -0400</pubDate>
      <guid>https://michaelthomasletts.com/blog/the-wilderness-and-the-no-place/</guid>
      <description>&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;&#xA;      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/rTI5foeAkaI?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;&gt;&lt;/iframe&gt;&#xA;    &lt;/div&gt;&#xA;&#xA;&lt;p&gt;The above-linked YouTube video went viral shortly after its publication. It features an interview of an OnlyFans Manager conducted by &lt;a href=&#34;https://www.youtube.com/@SoftWhiteUnderbelly&#34;&gt;Soft White Underbelly&lt;/a&gt;. If you haven&amp;rsquo;t seen it already, then I highly suggest viewing it.&lt;/p&gt;&#xA;&lt;p&gt;The virality of this particular interview can be explained, I submit, &lt;em&gt;primarily&lt;/em&gt; by two things:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/rTI5foeAkaI?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"></iframe>
    </div>

<p>The above-linked YouTube video went viral shortly after its publication. It features an interview of an OnlyFans Manager conducted by <a href="https://www.youtube.com/@SoftWhiteUnderbelly">Soft White Underbelly</a>. If you haven&rsquo;t seen it already, then I highly suggest viewing it.</p>
<p>The virality of this particular interview can be explained, I submit, <em>primarily</em> by two things:</p>
<ol>
<li>Online dating discourse is extremely popular, as a consequence of the <a href="https://mitpress.mit.edu/9780262533379/the-agony-of-eros/">difficulties</a> that young people are experiencing today in courtship and relationships. Young people rightly sense there are structural, sociological, and historical forces (besides personal adequacies) which at least partly explain their difficulties. Hence, anything which appears to offer insight into the inside baseball of, say, OnlyFans modelling tends to pique interest.</li>
<li>The interview is <em>palpably disturbing</em>. In the age of <a href="https://www.netflix.com/browse/genre/108820">True Crime</a> and resurgence of <a href="https://en.wikipedia.org/wiki/Satanic_panic">Satanic Panic</a>, <em>dark</em> online content that does not require sleuthing around the dark-web, blue-light districts, or occult clubs and organizations is like catnip; such content strips away the isolation and mundanity of average contemporary life and reveals to us how, indeed, there are still corners pregnant with <em>happening</em>. What makes the interview dark, according to viewer comments, is how the interview subject is conscious of how, according to him, most OnlyFans models have &ldquo;mental health issues&rdquo; and subscribers are &ldquo;deeply, deeply lonely&rdquo;. The interview subject is, in other words, a conscious and willing participant in exploiting vulnerable people: lonely, isolated men and desultory, depressed women.</li>
</ol>
<p>It is the second point above which I intend to treat in this blog post. The psychology of the interviewee <em>as a whole</em>, however, is not what concerns me here; rather, what interests me is a subtle theme which emerged many times throughout the interview yet, from reading user comments, appears to evade register by most viewers. Specifically, the interview subject&rsquo;s stated intention to save as much money as necessary to extricate his family from the modern <em>no-place</em>, which I shall define later, and relocate somewhere &ldquo;wholesome&rdquo;.</p>
<p>I submit it is not merely the interview subject&rsquo;s witting participation in exploitation of vulnerable people that is disturbing but his open acknowledgement there exists (and will always exist) places, akin to national parks, <em>untouched</em> by forces antagonistic to ritual, tradition, and eros &ndash; that is, <em>human society</em> &ndash; where he intends to eventually relocate. Like the Industrial Era which saw the destruction and displacement of ancient forests and wildlife, resulting in the establishment of national parks under the auspices of federal agencies, our period may be regarded retrospectively as perversely antagonistic to human life in ways not seen previously in human history. Unlike the Industrial Era, however, it seems certain corners of our planet are <em>informally</em> becoming refuge not for wildlife but rather <em>wholesome society</em>, reminiscent of so-called <a href="https://en.wikipedia.org/wiki/Blue_zone">&ldquo;Blue Zones&rdquo;</a> but from the perspective of ritual, tradition, and eros rather than age and physical health.</p>
<h2 id="the-wilderness">The Wilderness</h2>
<p>In local legend, the wilderness of Spotsylvania, Virginia &ndash; a roughly twelve mile tract of dense forest colloquially referred to as &ldquo;The Wilderness&rdquo;, which <a href="https://www.historynet.com/this-place-is-called-the-wilderness/">received its name during the Civil War</a> &ndash; is said to have been one of the last remaining forests in Virginia during the mid-nineteenth century due to its inhospitable quality. The open, rolling hills of nearby Warrenton, Virginia, verdant but deceptively bare, are a testament to this period. What are now equestrian grounds and breathtaking views for passersby along Route 15 was once a forest stretching to the Blue Ridge Mountains.</p>
<p>Whether or not the legend of The Wilderness is <em>factually true</em> matters less than what it intends to <em>illustrate</em>. Legends and myths do not exist to be audited but rather to <em>canonize shared human experience</em>. The legend of The Wilderness does not <em>literally</em> claim that <em>every last tree</em> was cut down across Virginia, except for The Wilderness; rather, it preserves the <em>sensation</em> of deforestation and <em>loss</em> &ndash; the landscape littered with tree stumps and sawdust, whereby The Wilderness stood tall still.</p>
<p>Conservation efforts in the United States, beginning in the late nineteenth century, arose from a similar recognition: that deforestation imperiled not only habitats but human communities. New York City today maintains roughly 1.7K parks, many of them reclaimed from former tenements or squatter settlements. Central Park itself, before its creation, displaced shantytowns and Seneca Village. Where Virginians from the Piedmont region carry the legend of The Wilderness as a story of nature’s loss, New Yorkers recall the human costs embedded in their parks — daily existence crowded, precarious, and stripped of dignity. Both stories preserve a memory of dispossession — one of nature, the other of community, the two arguably interchangeable. It seems like no coincidence, albeit difficult to describe in exact terms, that economic protections (e.g. labor protections, housing reform, etc) for human beings arose alongside natural protections.</p>
<h2 id="places-and-no-places">Places and No-Places</h2>
<p>The characteristically liberal rhetoric that once rationalized deforestation never vanished; it merely transmogrified in order to meet new markets. Greed and conquest do not die; they are only slowed by legislation or sovereign exception. By the time natural conservation arrived, countless trees, animals, and landscapes had already been butchered. At one point it seemed the whole United States of America might be stripped bare.</p>
<p>If ritual, tradition, and eros are, as I have argued, the natural habitat of human beings, then we must ask whether anything can be done to protect them from today’s equivalent forms and forces of deforestation: the competition for attention, the exploitation of emotional vulnerability, and the profitable cultivation of isolation, among other forces.</p>
<p>Just as early industrialists reserved pockets of untouched beauty for their own exclusive indulgence, today’s elites carve out enclaves — Martha&rsquo;s Vineyard, Georgetown, Jackson Hole, Hawaii (increasingly), and others — where society is preserved. Access to these enclaves is prohibitively expensive. Even for those who service these enclaves as employees and managers. Inside these sanctuaries, <a href="https://www.cnbc.com/2019/10/23/how-mark-zuckerberg-manages-kids-screen-time.html">families are shielded</a> from the egregore their industries export. Outside, the rest of us are pressured ceaselessly to indulge. We produce the pressure ourselves much of the time in a form of auto-exploitation. Although, within my social milieu, I am happy to report how I have observed a growing tide of anti-social media sentiment.</p>
<p>The divide is stark: a shrinking class of producers of the digital medium, and a swelling population altogether ensnared by it. Even the most intimate human encounters — a first date, for instance — typically require a corporate interloper or mediator (a dating application), wrapped in the rhetoric of safety, options, and <em>possibility</em>.</p>
<p>Thus there emerge <em>places</em> and <em>no-places</em>, as surely as The Wilderness once stood amid stumps and sawdust. Just a few small enclaves preserve the conditions conducive to prosperous human life; around them spreads a barren, boundariless terrain of digital attention markets, emotional exploitation, artificial &ldquo;intelligence&rdquo;, and parasocial consolation — the sawdust of society.</p>
<p>We needn&rsquo;t guess about what sorts of legends or myths people of the future will tell about this chapter of human experience. Already, we see the formation of online mythologies and <a href="https://en.wikipedia.org/wiki/Gen_Z_stare">unambiguous affectations</a> which capture not <em>literal, auditable facts</em> about this chapter of human experience but rather its <em>emotional and spiritual resonance</em>. Only the prophets of doom, like Oswald Spengler and authors of the ancient Vedas, provide anything remotely instructive or edifying for the countless young people <em>consciously experiencing the erasure of home</em> and asking themselves &ndash; <em>what is this place?</em></p>
<h2 id="the-last-place">The Last Place</h2>
<p>The interview subject is engaged in the modern equivalent of what early industrialists once did: plotting his escape from the conditions he has profited by creating. So long as there remains some place untouched, he believes, all is well. The no-place — the exploited terrain left behind — can go to hell. According to him, today&rsquo;s issues are simply too complicated and fraught to be fixed. Might as well make a buck on the way down. In this sense, he is nothing new. He is like a strange distortion of the man Julius Evola imagined in <em>Ride the Tiger</em>: not mastering decay, but exploiting it, extracting profit from the very ruin he intends to flee.</p>
<p>More telling still is the silence that surrounded his confession. The interviewer let it pass without challenge or comment. I have yet to find any viewer who remarked on it in the comments. Perhaps they did not notice. Or perhaps they did — but envied him. Who among them, given the chance, would not also exploit their fellow man if it promised an eventual exit into a refuge, a <em>place</em>? But what happens when there are finally no <em>places</em> left?</p>
<p>The answers to those questions, I suspect, are what actually makes this interview so disturbing. He has admitted what we all sense but dare not face. He has greeted the mirror.</p>
<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/z3PCdJLBPrI?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=960" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="Zoviet France - &#39;Ascend a Fall&#39;"></iframe>
    </div>

]]></content:encoded>
    </item>
    <item>
      <title>boto3-refresh-session and credential_process: where each fits</title>
      <link>https://michaelthomasletts.com/blog/brs-rationale/</link>
      <pubDate>Mon, 08 Sep 2025 00:02:07 -0400</pubDate>
      <guid>https://michaelthomasletts.com/blog/brs-rationale/</guid>
      <description>&lt;p&gt;&lt;code&gt;boto3-refresh-session&lt;/code&gt; has received a lot of positive attention and adoption, but it also has detractors. In fact, it has been outright dismissed by a minority of developers online; however, those detractors do not seem understand what set of problems &lt;code&gt;boto3-refresh-session&lt;/code&gt; solves or &lt;em&gt;who&lt;/em&gt; it is &lt;em&gt;for&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&amp;ldquo;Just create profiles &amp;ndash; it works for every single credential type and will refresh automatically. I don&amp;rsquo;t know why you would create a library for this when all SDKs work the same with profile configurations.&amp;rdquo;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><code>boto3-refresh-session</code> has received a lot of positive attention and adoption, but it also has detractors. In fact, it has been outright dismissed by a minority of developers online; however, those detractors do not seem understand what set of problems <code>boto3-refresh-session</code> solves or <em>who</em> it is <em>for</em>.</p>
<blockquote>
<p>&ldquo;Just create profiles &ndash; it works for every single credential type and will refresh automatically. I don&rsquo;t know why you would create a library for this when all SDKs work the same with profile configurations.&rdquo;</p></blockquote>
<p>This is a <em>very</em> common misunderstanding. While profiles cover many cases, they don’t solve every scenario Python developers encounter.</p>
<p>It is unclear if the origins of those spurious criticisms are rooted in basic misunderstanding or cursory trolling. Either way, I worry teams and individuals who would actually benefit from <code>boto3-refresh-session</code> will occasionally be deterred from evaluating it.</p>
<p>I am therefore compelled to clarify <em>who exactly this package is for</em> and <em>exactly what problems it does and does not solve</em>.</p>
<p>Arguably, it is not my responsibility to edify anyone about <code>credential_process</code>, etc; however, as the founder and core maintainer of <code>boto3-refresh-session</code>, it <em>is</em> my obligation to ensure the community understands, to the best of my ability, what this tool is and is <em>not</em>.</p>
<h2 id="some-examples-of-what-already-auto-refreshes-when-used-correctly"><em>Some</em> examples of what <em>already</em> auto-refreshes (when used correctly):</h2>
<p>The following bulletpoints are <em>not</em> an exhaustive list.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<ul>
<li>
<p>EC2 instance roles (IMDS): Botocore’s EC2 provider fetches / rotates credentials from the instance metadata service automatically. No manual refresh needed in long-running apps if you let the default provider chain run.</p>
</li>
<li>
<p>ECS / Fargate task roles (task metadata endpoint): Botocore’s ECS provider pulls / renews task role creds via the container credentials endpoint automatically. <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
</li>
<li>
<p><code>credential_process</code> (in <code>~/.aws/config</code>): if the external process returns JSON with an <code>Expiration</code>, <code>botocore</code> treats it as refreshable and will re-invoke before expiry. (If you hardcode creds or the process omits expiration, you lose true refresh semantics.)</p>
</li>
<li>
<p><code>AssumeRole</code> via <code>profile</code> (<code>role_arn</code> + <code>source_profile</code>): using a named profile (not hardcoded env vars) lets <code>botocore</code> renew the STS session behind the scenes.</p>
</li>
<li>
<p>Web identity (IRSA on EKS): the SDK exchanges the projected token and refreshes as needed.</p>
</li>
</ul>
<h2 id="some-examples-of-when-that-isnt-true-common-foot-guns-for-python-devs"><em>Some</em> examples of when that isn’t true (common foot-guns for <em>Python</em> devs):</h2>
<p>The following bulletpoints are also not an exhaustive list.<sup id="fnref1:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<ul>
<li>
<p>You bypass the provider chain. Example: exporting <code>AWS_ACCESS_KEY_ID</code> | <code>SECRET</code> | <code>SESSION_TOKEN</code> from a one-off <code>aws sts assume-role</code> and then launching a long process. Or sidestepping the standard credential provider in ECS. Those tokens expire and will not auto-refresh. That is where <code>RefreshableSession(method=&quot;custom&quot;)</code> becomes helpful.</p>
</li>
<li>
<p>You pass explicit credentials to <code>boto3.Session(...)</code>. Providing keys directly (or reading them once from a file) fixes the credentials for the life of the process — no refresh.</p>
</li>
<li>
<p>Profiles without expiration semantics. If your <code>credential_process</code> doesn’t emit <code>Expiration</code>, the SDK can’t plan a refresh (it treats them as static/opaque).</p>
</li>
<li>
<p>Network / metadata blocked. Enterprises that block IMDSv2 or ECS task endpoints (or container lacks the env wiring) break auto-refresh even on EC2 / ECS (as mentioned above).</p>
</li>
<li>
<p>SSO &amp; very long runtimes. SSO profiles refresh while the device token is valid, but headless, weeks-long daemons can still hit interactive renewal walls.<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></p>
</li>
<li>
<p>IoT credentials (X.509). The AWS IoT credentials provider (mTLS to the IoT endpoint, role alias, then STS creds) is not a built-in <code>botocore</code> provider. Out of the box, the SDK won’t auto-renew those for you.</p>
</li>
<li>
<p><code>credential_process</code> binaries can be brittle, i.e. difficult to maintain and distribute.</p>
</li>
</ul>
<h2 id="who-boto3-refresh-session-is-for-and-not">Who <code>boto3-refresh-session</code> is for (and not)</h2>
<p><code>boto3-refresh-session</code> is for <strong>Python developers</strong> who need a robust, <em>Python-native</em> way to handle expiring credentials — whether because they can’t rely on <code>credential_process</code>, they’re embedding <code>boto3</code> in long-running daemons, or they’re working with IoT / X.509 flows that the standard provider chain doesn’t support.</p>
<p><code>boto3-refresh-session</code> is <em>not</em> for people who use the standard ECS / EC2 credential provider, depend upon <code>credential_process</code> without friction, or are not aware of the limitations and edge cases associated with profiles, AWS credential providers, etc.</p>
<h2 id="reflections">Reflections</h2>
<p><code>boto3-refresh-session</code> isn’t the easiest package to explain; it is a <em>niche</em> backend Python package. It doesn’t lend itself to a pithy, one-line slogan, which can make the README challenging to keep concise. In some ways, <code>boto3-refresh-session</code> is less about who it&rsquo;s for than not. Which is odd.</p>
<p>What reassures me is that the engineers and teams who found this project and adopted it tend to be highly competent, and so far the lack of open issues or pull requests suggests the library is stable and working as intended.</p>
<p>Still, I want to make this tool accessible to the very developers I originally had in mind when I published this project — namely, engineers and data scientists who struggle with expiring credentials in long-lived processes and don’t want to hand-roll refresh logic (or can&rsquo;t - for whatever reason). My hope is this post clarifies common misconceptions about what this project is and is not, and why it exists.</p>
<p>If you’re a Python developer working with long-running workloads, IoT / X.509 flows, or any environment where the standard provider chain falls short, <code>boto3-refresh-session</code> exists so you can stop worrying about credentials and focus on your application.</p>
<p>If you have questions, reach out via GitHub or any of the usual channels.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>These examples are representative, not exhaustive. Covering every AWS service and edge case isn’t realistic, but I’ve highlighted the more common pitfalls.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref1:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>This is why I <a href="https://github.com/michaelthomasletts/boto3-refresh-session/pull/78">deprecated the <code>ecs</code> module</a>.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>I have actually been asked by a cybersecurity engineer at a well-known security company to support SSO in <code>boto3-refresh-session</code> for exactly this reason. Admittedly, I have not found the time yet to develop a module for supporting SSO. But soon!&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Reducing data remediation runtime from 55 hours to 7 seconds with Aho-Corasick</title>
      <link>https://michaelthomasletts.com/blog/aho-corasick/</link>
      <pubDate>Wed, 30 Jul 2025 00:06:26 -0400</pubDate>
      <guid>https://michaelthomasletts.com/blog/aho-corasick/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Aho%E2%80%93Corasick_algorithm&#34;&gt;Aho-Corasick&lt;/a&gt; is a classic multi-pattern string matching algorithm — like regex, but significantly faster. Unlike regex, which (&lt;a href=&#34;https://github.com/BurntSushi/rebar?tab=readme-ov-file#dictionary&#34;&gt;depending on the implementation&lt;/a&gt;) may scale exponentially with input size, Aho-Corasick scales linearly. That property — linear time complexity — makes it &lt;em&gt;ridiculously fast&lt;/em&gt;, and ideal for large-scale data remediation.&lt;/p&gt;&#xA;&lt;p&gt;I first learned about Aho-Corasick back in 2018 but filed it away under “interesting but unnecessary for me right now.” Years later, I found myself responsible for remediating records across datasets at petabyte scale.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Aho%E2%80%93Corasick_algorithm">Aho-Corasick</a> is a classic multi-pattern string matching algorithm — like regex, but significantly faster. Unlike regex, which (<a href="https://github.com/BurntSushi/rebar?tab=readme-ov-file#dictionary">depending on the implementation</a>) may scale exponentially with input size, Aho-Corasick scales linearly. That property — linear time complexity — makes it <em>ridiculously fast</em>, and ideal for large-scale data remediation.</p>
<p>I first learned about Aho-Corasick back in 2018 but filed it away under “interesting but unnecessary for me right now.” Years later, I found myself responsible for remediating records across datasets at petabyte scale.</p>
<p>At the time, remediations were being performed using SQL queries embedded with regular expressions, running against an already-overloaded relational database. The approach was inefficient: <em>most</em> client datasets took between 30 minutes to an hour to process, and in some cases stretched as long as <em>55 hours</em>. As you can probably imagine, those datasets with excessive runtimes were enormous.</p>
<p>Recognizing an opportunity to improve things, I began re-architecting the remediation code. Given the scale of the data and the need for runtime and memory efficiency, it quickly became clear that the shared RDBMS was a major bottleneck. Profiling revealed that regular expressions — not just SQL overhead and database performance — were the primary cause of long runtimes. As the number and length of substrings grew, performance degraded exponentially. This also proved true when using Python’s built-in <code>re</code> module.</p>
<p>In modern data engineering, large datasets are often processed using distributed systems like Apache Spark, with custom user-defined functions to apply transformation logic. Another common tool is DuckDB, which also supports UDFs and is popular for fast local analytics and ease of use.</p>
<p>However, DuckDB began leaking memory at scale — confirming concerns <a href="https://github.com/duckdb/duckdb-node/issues/55">previously raised by the community</a>. And while Spark offered better scale, efficiently sharing a large Aho-Corasick automaton between executors introduced more complexity than it solved. User-defined functions also tend to be inefficient.</p>
<p>To avoid shared-memory challenges in Spark and instability in DuckDB, I opted to use Python’s built-in <code>multiprocessing</code> library in tandem with Aho-Corasick.</p>
<p>Since Python multiprocessing typically involves deep memory copying between processes, which would have blown up RAM usage at scale, I used the <code>fork</code> start method on Linux to ensure memory sharing via copy-on-write semantics. This allowed large, immutable data structures (like the target dataset and automatons) to be reused across processes without duplication, keeping memory usage comfy.</p>
<p>Additionally, I took care to scope all shared data within a global cache, which avoids passing large payloads via <code>Pool.apply_async(...)</code> calls and minimizes serialization overhead.</p>
<p>The results were staggering: <strong>55 hours → 7 seconds</strong>.</p>
<p>A key reason for this performance wasn’t simply the use of Aho-Corasick but <em>how the data was shared</em>. By loading large datasets and compiled automatons once, and forking worker processes afterward, I avoided memory duplication entirely. If I had passed these structures via arguments or used <code>spawn</code>, it would have resulted in prohibitive memory usage and slower compute due to unnecessary serialization and GC pressure.</p>
<h2 id="important-concepts">Important Concepts</h2>
<p>Before you rush to implement Aho-Corasick expecting miracles, a word of caution: <strong>Aho-Corasick + parallelization won’t yield superb performance unless your code is optimized.</strong></p>
<p>To borrow from the pseudo-code further below, you’ll need to understand:</p>
<ul>
<li>The difference between “spawn” and “fork” memory allocation modes in Python’s multiprocessing module and how fork enables memory-efficient parallelism via copy-on-write. This matters because using spawn (the default on macOS and Windows) will fully copy large objects, causing massive memory spikes if you’re not careful. On Linux, fork allows those objects to be shared so long as they’re never mutated.</li>
<li>The importance of the <a href="https://r4ds.had.co.nz/tidy-data.html">“tidy data” principle</a> and general data layout — so your data can be scanned efficiently.</li>
<li>The necessity of <strong>profiling</strong> your code, early and often.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></li>
</ul>
<p>Additionally, realize you may not need to use the <code>multiprocessing</code> library after all. You might be able to write a user-defined function that’s implemented in DuckDB or Spark. That decision depends primarily on the scale of your data<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> and-or comfort with digging deep into Spark. To be honest, I actually <em>recommend</em> that you use a user-defined function in DuckDB — that is, if the scale of your data isn’t enormous. It will be less efficient than using Aho-Corasick + <code>multiprocessing</code> but certainly simpler.</p>
<h2 id="how-to-use-aho-corasick-with-python">How to Use Aho-Corasick with Python</h2>
<p>The pseudo-code that follows accepts two pandas <code>DataFrame</code> objects: <code>target</code> and <code>sensitive_values</code>.</p>
<ul>
<li><code>target</code> contains the data that must be scanned for sensitive content and remediated
sensitive_values contains the values to search for and obfuscate</li>
<li>The Aho-Corasick automaton does not care how sensitive values appear in target—whether as substrings or exact matches. All matches are remediated the same way.</li>
</ul>
<p>For example:</p>
<ul>
<li>If <code>&quot;1234&quot;</code> is a sensitive value, then <code>&quot;1234_5678&quot;</code> becomes <code>&quot;xXxX_5678&quot;</code></li>
<li>If <code>&quot;1234&quot;</code> appears on its own, it becomes <code>&quot;xXxX&quot;</code>.</li>
</ul>
<p>Multiple matches per record are handled without issue. Referring back to the tidy data concept: <code>sensitive_values</code> is represented in a long format.</p>
<p>To illustrate:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>[
</span></span><span style="display:flex;"><span>  {<span style="color:#e6db74">&#34;element_name&#34;</span>: <span style="color:#e6db74">&#34;x&#34;</span>, <span style="color:#e6db74">&#34;sensitive_value&#34;</span>: <span style="color:#e6db74">&#34;1234&#34;</span>},
</span></span><span style="display:flex;"><span>  {<span style="color:#e6db74">&#34;element_name&#34;</span>: <span style="color:#e6db74">&#34;x&#34;</span>, <span style="color:#e6db74">&#34;sensitive_value&#34;</span>: <span style="color:#e6db74">&#34;5678&#34;</span>},
</span></span><span style="display:flex;"><span>  {<span style="color:#e6db74">&#34;element_name&#34;</span>: <span style="color:#e6db74">&#34;y&#34;</span>, <span style="color:#e6db74">&#34;sensitive_value&#34;</span>: <span style="color:#e6db74">&#34;abc&#34;</span>}
</span></span><span style="display:flex;"><span>]</span></span></code></pre></div><p>Why does this matter? Because this long format allows the data to be grouped by <code>element_name</code>, deduplicated, and quickly loaded into per-column automatons. Each parallel process then scans each record in each column for matches in its associated automaton.</p>
<p>Lastly, you’ll need to download <a href="pyahocorasick"><code>pyahocorasick</code></a> and <code>pandas</code>. You can use <code>polars</code> instead of <code>pandas</code> if you prefer. <code>polars</code> may actually make the following pseudo-code even faster, albeit marginally. There are also Rust-based implementations available out there online.</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> gc
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> collections <span style="color:#f92672">import</span> defaultdict
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> multiprocessing <span style="color:#f92672">import</span> Pool, get_context
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> ahocorasick <span style="color:#f92672">import</span> Automaton
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Singleton cache used to hold large, immutable shared data </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># (e.g. automatons, target df).</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Under &#39;fork&#39; mode, this data is shared across processes </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># via copy-on-write, avoiding memory duplication.</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ObfuscatorCache</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">__init__</span>(self):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>automatons <span style="color:#f92672">=</span> <span style="color:#66d9ef">None</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>target <span style="color:#f92672">=</span> <span style="color:#66d9ef">None</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>executor <span style="color:#f92672">=</span> <span style="color:#66d9ef">None</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>metrics <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># initializing global cache object for sharing immutable</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># data between processes</span>
</span></span><span style="display:flex;"><span>cache <span style="color:#f92672">=</span> ObfuscatorCache()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Obfuscator</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">__init__</span>(
</span></span><span style="display:flex;"><span>        self,
</span></span><span style="display:flex;"><span>        sensitive_values: pd<span style="color:#f92672">.</span>DataFrame,
</span></span><span style="display:flex;"><span>        target: pd<span style="color:#f92672">.</span>DataFrame,
</span></span><span style="display:flex;"><span>        automatons: dict[str, Automaton] <span style="color:#f92672">|</span> <span style="color:#66d9ef">None</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">None</span>,
</span></span><span style="display:flex;"><span>        max_workers: int <span style="color:#f92672">|</span> <span style="color:#66d9ef">None</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">None</span>,
</span></span><span style="display:flex;"><span>    ):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>_sensitive_values <span style="color:#f92672">=</span> sensitive_values
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>_max_workers <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span> <span style="color:#66d9ef">if</span> max_workers <span style="color:#f92672">is</span> <span style="color:#66d9ef">None</span> <span style="color:#66d9ef">else</span> max_workers
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Enables copy-on-write memory sharing on Linux/Unix</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>_ctx <span style="color:#f92672">=</span> get_context(<span style="color:#e6db74">&#34;fork&#34;</span>)
</span></span><span style="display:flex;"><span>        cache<span style="color:#f92672">.</span>target <span style="color:#f92672">=</span> target
</span></span><span style="display:flex;"><span>        cache<span style="color:#f92672">.</span>automatons <span style="color:#f92672">=</span> (
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>make_automatons(sensitive_values)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> automatons <span style="color:#f92672">is</span> <span style="color:#66d9ef">None</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">else</span> automatons
</span></span><span style="display:flex;"><span>        )
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@property</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">target</span>(self) <span style="color:#f92672">-&gt;</span> pd<span style="color:#f92672">.</span>DataFrame:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> cache<span style="color:#f92672">.</span>target
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@target.setter</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">target</span>(self, value: pd<span style="color:#f92672">.</span>DataFrame):
</span></span><span style="display:flex;"><span>        cache<span style="color:#f92672">.</span>target <span style="color:#f92672">=</span> value
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> hasattr(self, <span style="color:#e6db74">&#34;_ctx&#34;</span>):
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>_ctx<span style="color:#f92672">.</span>target <span style="color:#f92672">=</span> value
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@property</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">metrics</span>(self) <span style="color:#f92672">-&gt;</span> int:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> cache<span style="color:#f92672">.</span>metrics
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@metrics.setter</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">metrics</span>(self, value: int):
</span></span><span style="display:flex;"><span>        cache<span style="color:#f92672">.</span>metrics <span style="color:#f92672">=</span> value
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@property</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">automatons</span>(self) <span style="color:#f92672">-&gt;</span> dict[str, Automaton]:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> cache<span style="color:#f92672">.</span>automatons
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@property</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">executor</span>(self) <span style="color:#f92672">-&gt;</span> Pool:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> cache<span style="color:#f92672">.</span>executor <span style="color:#f92672">is</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>            cache<span style="color:#f92672">.</span>executor <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>_ctx<span style="color:#f92672">.</span>Pool(processes<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>_max_workers)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> cache<span style="color:#f92672">.</span>executor
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">shutdown_executor</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> cache<span style="color:#f92672">.</span>executor <span style="color:#f92672">is</span> <span style="color:#f92672">not</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>            cache<span style="color:#f92672">.</span>executor<span style="color:#f92672">.</span>terminate()
</span></span><span style="display:flex;"><span>            cache<span style="color:#f92672">.</span>executor<span style="color:#f92672">.</span>join()
</span></span><span style="display:flex;"><span>            cache<span style="color:#f92672">.</span>executor <span style="color:#f92672">=</span> <span style="color:#66d9ef">None</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@staticmethod</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">make_automaton</span>(patterns: set) <span style="color:#f92672">-&gt;</span> Automaton:
</span></span><span style="display:flex;"><span>        A <span style="color:#f92672">=</span> Automaton()
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> pattern <span style="color:#f92672">in</span> patterns:
</span></span><span style="display:flex;"><span>            A<span style="color:#f92672">.</span>add_word(pattern, pattern)
</span></span><span style="display:flex;"><span>        A<span style="color:#f92672">.</span>make_automaton()
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> A
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">make_automatons</span>(self, sensitive_values: pd<span style="color:#f92672">.</span>DataFrame) <span style="color:#f92672">-&gt;</span> dict[str, Automaton]:
</span></span><span style="display:flex;"><span>        findings <span style="color:#f92672">=</span> defaultdict(set)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> element, group <span style="color:#f92672">in</span> sensitive_values<span style="color:#f92672">.</span>groupby(<span style="color:#e6db74">&#34;element_name&#34;</span>):
</span></span><span style="display:flex;"><span>            findings[element]<span style="color:#f92672">.</span>update(str(finding) <span style="color:#66d9ef">for</span> finding <span style="color:#f92672">in</span> group[<span style="color:#e6db74">&#34;sensitive_value&#34;</span>])
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">del</span> self<span style="color:#f92672">.</span>_sensitive_values
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> {
</span></span><span style="display:flex;"><span>            element: self<span style="color:#f92672">.</span>make_automaton(patterns)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> element, patterns <span style="color:#f92672">in</span> findings<span style="color:#f92672">.</span>items()
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">obfuscate</span>(self, inplace: bool <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>) <span style="color:#f92672">-&gt;</span> pd<span style="color:#f92672">.</span>DataFrame:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> inplace:
</span></span><span style="display:flex;"><span>            obfuscated_target <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>target<span style="color:#f92672">.</span>copy()
</span></span><span style="display:flex;"><span>            futures <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>                self<span style="color:#f92672">.</span>executor<span style="color:#f92672">.</span>apply_async(self<span style="color:#f92672">.</span>_obfuscate_column, args<span style="color:#f92672">=</span>(column,))
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">for</span> column <span style="color:#f92672">in</span> self<span style="color:#f92672">.</span>automatons<span style="color:#f92672">.</span>keys()
</span></span><span style="display:flex;"><span>            ]
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> future <span style="color:#f92672">in</span> futures:
</span></span><span style="display:flex;"><span>                column, obfuscated_series, local_counts <span style="color:#f92672">=</span> future<span style="color:#f92672">.</span>get()
</span></span><span style="display:flex;"><span>                obfuscated_target[column] <span style="color:#f92672">=</span> obfuscated_series
</span></span><span style="display:flex;"><span>                self<span style="color:#f92672">.</span>metrics <span style="color:#f92672">+=</span> local_counts[column]
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> obfuscated_target
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>         <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            futures <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>                self<span style="color:#f92672">.</span>executor<span style="color:#f92672">.</span>apply_async(self<span style="color:#f92672">.</span>_obfuscate_column, args<span style="color:#f92672">=</span>(column,))
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">for</span> column <span style="color:#f92672">in</span> self<span style="color:#f92672">.</span>automatons<span style="color:#f92672">.</span>keys()
</span></span><span style="display:flex;"><span>            ]
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> future <span style="color:#f92672">in</span> futures:
</span></span><span style="display:flex;"><span>                column, obfuscated_series, local_counts <span style="color:#f92672">=</span> future<span style="color:#f92672">.</span>get()
</span></span><span style="display:flex;"><span>                self<span style="color:#f92672">.</span>target[column] <span style="color:#f92672">=</span> obfuscated_series
</span></span><span style="display:flex;"><span>                self<span style="color:#f92672">.</span>metrics <span style="color:#f92672">+=</span> local_counts[column]
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">del</span> column, obfuscated_series, local_counts, future
</span></span><span style="display:flex;"><span>                gc<span style="color:#f92672">.</span>collect()
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>target
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">_obfuscate_column</span>(self, column: str) <span style="color:#f92672">-&gt;</span> tuple[str, pd<span style="color:#f92672">.</span>Series, dict[str, int]]:
</span></span><span style="display:flex;"><span>        local_metrics <span style="color:#f92672">=</span> defaultdict(int)
</span></span><span style="display:flex;"><span>        series <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>target[column]
</span></span><span style="display:flex;"><span>        obfuscated_series <span style="color:#f92672">=</span> series<span style="color:#f92672">.</span>map(
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">lambda</span> v: self<span style="color:#f92672">.</span>_obfuscate_record(v, self<span style="color:#f92672">.</span>automatons, column, local_metrics)
</span></span><span style="display:flex;"><span>        )
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> column, obfuscated_series, local_metrics
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@staticmethod</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">_obfuscate_record</span>(
</span></span><span style="display:flex;"><span>        value: str,
</span></span><span style="display:flex;"><span>        automatons: dict[str, Automaton],
</span></span><span style="display:flex;"><span>        column: str,
</span></span><span style="display:flex;"><span>        counter: dict,
</span></span><span style="display:flex;"><span>        obfuscate_char: str <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;x&#34;</span>,
</span></span><span style="display:flex;"><span>    ) <span style="color:#f92672">-&gt;</span> str:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> (
</span></span><span style="display:flex;"><span>            matches <span style="color:#f92672">:=</span> [
</span></span><span style="display:flex;"><span>                (end <span style="color:#f92672">-</span> len(<span style="color:#66d9ef">match</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, end)
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">for</span> end, <span style="color:#66d9ef">match</span> <span style="color:#f92672">in</span> automatons[column]<span style="color:#f92672">.</span>iter(value)
</span></span><span style="display:flex;"><span>            ]
</span></span><span style="display:flex;"><span>        ):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> value
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        merged <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> start, end <span style="color:#f92672">in</span> sorted(matches):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> merged <span style="color:#f92672">or</span> start <span style="color:#f92672">&gt;</span> merged[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">1</span>]:
</span></span><span style="display:flex;"><span>                merged<span style="color:#f92672">.</span>append([start, end])
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>                merged[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> (merged[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">0</span>], max(merged[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">1</span>], end))
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        chars <span style="color:#f92672">=</span> list(value)
</span></span><span style="display:flex;"><span>        counter[column] <span style="color:#f92672">+=</span> len(merged)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> start, end <span style="color:#f92672">in</span> merged:
</span></span><span style="display:flex;"><span>            length <span style="color:#f92672">=</span> end <span style="color:#f92672">-</span> start <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>            pattern <span style="color:#f92672">=</span> (obfuscate_char <span style="color:#f92672">+</span> obfuscate_char<span style="color:#f92672">.</span>upper()) <span style="color:#f92672">*</span> ((length <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">//</span> <span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>            chars[start : end <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> list(pattern[:length])
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(chars)</span></span></code></pre></div><div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>If you want a tool that makes memory and runtime profiling incredibly easy then check out <a href="https://github.com/michaelthomasletts/profile-this">this repository I wrote</a>. Sometimes, line-by-line profiling is too granular; rather, you need to understand how your code performs, from a memory allocation perspective, <em>temporally</em>. I wrote this repository for those situations exactly — but with an emphasis on simplicity and speed.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>I am not aware of any hard and fast statistics on exact thresholds for memory leakage in DuckDB so DYOR and experimentation.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
  </channel>
</rss>
